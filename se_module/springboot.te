############################################################################
#
#	Springboot SELinux policymodule
#
#	https://github.com/lhqg/selinux_springboot
#
#
# Copyright (c) 2022 LHQG, H. Quarantel-Colombani <hubert@quarantel.name>
# Author: Hubert Quarantel-Colombani <hubert@quarantel.name>
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
############################################################################

policy_module(springboot, 1.5.1)

########################################
#
#	Types and attributes declarations
#
########################################

attribute	springboot_file_type;
attribute	springboot_deploy_file_type;

attribute	springboot_consumed_svc_type;
attribute	springboot_monitoring_port_type;


ifdef(`distro_redhat',`
        systemd_domain_template(springboot)
')

ifdef(`distro_debian',`
        type springboot_t;
        type springboot_exec_t;

        init_daemon_domain(springboot_t, springboot_exec_t)

        allow init_t springboot_t:process2 { nnp_transition nosuid_transition };

        kernel_read_system_state(springboot_t)
        auth_use_nsswitch(springboot_t)
')

typeattribute	springboot_exec_t	springboot_file_type;
typeattribute	springboot_exec_t	springboot_deploy_file_type;

type		springboot_port_t;
typeattribute	springboot_port_t	springboot_consumed_svc_type;
corenet_port(springboot_port_t)

type		springboot_monitoring_port_t;
typeattribute	springboot_monitoring_port_t	springboot_monitoring_port_type;
corenet_port(springboot_monitoring_port_t)


type		springboot_conf_t;
typeattribute	springboot_conf_t	springboot_file_type;
typeattribute	springboot_conf_t	springboot_deploy_file_type;
files_config_file(springboot_conf_t)

type		springboot_auth_t;
typeattribute	springboot_auth_t	springboot_file_type;
files_auth_file(springboot_auth_t)

type		springboot_log_t;
typeattribute	springboot_log_t	springboot_file_type;
logging_log_file(springboot_log_t)

type		springboot_var_t;
typeattribute	springboot_var_t	springboot_file_type;
files_type(springboot_var_t)

type 		springboot_run_t;
typeattribute	springboot_run_t	springboot_file_type;
typeattribute	springboot_run_t	springboot_deploy_file_type;
files_type(springboot_run_t)

type		springboot_bin_t;
typeattribute	springboot_bin_t	springboot_file_type;
typeattribute	springboot_bin_t	springboot_deploy_file_type;
application_executable_file(springboot_bin_t)

type		springboot_lib_t;
typeattribute	springboot_lib_t	springboot_file_type;
typeattribute	springboot_lib_t	springboot_deploy_file_type;
files_type(springboot_lib_t)

type		springboot_dynlib_t;
typeattribute	springboot_dynlib_t	springboot_file_type;
typeattribute	springboot_dynlib_t	springboot_deploy_file_type;
files_type(springboot_dynlib_t)


type		springboot_tmp_t;
typeattribute	springboot_tmp_t	springboot_file_type;
typeattribute	springboot_tmp_t	springboot_deploy_file_type;
files_tmp_file(springboot_tmp_t)

type		springboot_unit_file_t;
ifdef(`distro_redhat',`
	systemd_unit_file(springboot_unit_file_t);
')
ifdef(`distro_debian',`
	init_unit_file(springboot_unit_file_t);
')

bool	allow_springboot_connectto_http		true;
bool	allow_springboot_connectto_self		false;

bool	allow_springboot_syslog_netsend		false;

bool	allow_springboot_connectto_ldap		false;
bool	allow_springboot_connectto_smtp		false;

ifdef(`distro_redhat',`
	bool	allow_springboot_connectto_oracle	false;
	bool	allow_springboot_connectto_mongodb	false;
')
bool	allow_springboot_connectto_mysql	false;
bool	allow_springboot_connectto_pgsql	false;
bool	allow_springboot_connectto_redis	false;
bool	allow_springboot_connectto_couchdb	false;


bool	allow_springboot_dynamic_libs				false;
bool	allow_springboot_purge_logs					false;
bool	allow_springboot_rewrite_logs				false;
bool	allow_webadm_read_springboot_files			false;
bool	allow_sysadm_write_springboot_files			false;
bool	allow_sysadm_manage_springboot_auth_files	false;


gen_require(`
	type	http_port_t;
	type	smtp_port_t;
	type	ldap_port_t;
ifdef(`distro_redhat',`
	type	oracle_port_t;
	type	mongod_port_t;
')
	type	mysqld_port_t;
	type	postgresql_port_t;
	type	redis_port_t;
	type	couchdb_port_t;
	type	syslog_tls_port_t;
	type	syslogd_port_t;

	type	httpd_t;
	type	postfix_smtpd_t;
	type	qmail_smtpd_t;
	type	sendmail_t;
	type	slapd_t;
ifdef(`distro_redhat',`
	type	dirsrv_t;
')
	type	mysqld_t;
	type	postgresql_t;
	type	redis_t;
	type	couchdb_t;
	type	syslogd_t;

	type	node_t;

	type	proc_t;
	type	proc_net_t;
	type	sysfs_t;
	type	fs_t;
	type	sysctl_net_t;

	type	bin_t;
	type	tmp_t;
	type	shell_exec_t;
ifdef(`distro_redhat',`
	type	passwd_file_t;
')
	type	cert_t;

	type	user_tmp_t;
	type	user_home_dir_t;

	type	sysadm_t;
	type	logadm_t;
	type	webadm_t;

	role	system_r;
	
	attribute	domain;

	class	service	all_service_perms;
')
ifdef(`distro_debian', `
	define(`manage_service_perms', `{ start stop status reload enable disable } ')
	define(`lhqg__sendrecv_udp_socket_perms', `{ sendto recvfrom } ')
')
ifdef(`distro_redhat', `
	define(`lhqg__sendrecv_udp_socket_perms', `{ sendto recvfrom send_msg recv_msg } ')
')

########################################
#
#	Policy for springboot_t domain
#
########################################

role	system_r	types	springboot_t;

mcs_constrained(springboot_t)

#
## Allow generic usage of the host
#

corecmd_read_bin_files(springboot_t)
corecmd_exec_all_executables(springboot_t)
files_exec_usr_files(springboot_t)
files_exec_etc_files(springboot_t)
files_search_locks(springboot_t)
files_read_var_files(springboot_t)
files_read_var_symlinks(springboot_t)
files_read_generic_spool(springboot_t)
files_read_var_lib_files(springboot_t)
files_getattr_lost_found_dirs(springboot_t)
files_read_config_files(springboot_t)
fs_read_noxattr_fs_files(springboot_t)
fs_read_noxattr_fs_symlinks(springboot_t)
fs_rw_cgroup_files(springboot_t)

ifdef(`distro_redhat',`
	application_getattr_socket(springboot_t)
')
ifdef(`distro_redhat',`
	gen_require(`
        attribute application_domain_type;
    ')
    allow springboot_t	application_domain_type:socket_class_set getattr;
')

dev_read_rand(springboot_t)

logging_send_syslog_msg(springboot_t)
logging_send_audit_msgs(springboot_t)

#
##	Permissions on self resources
#

allow	springboot_t	self:capability	{ chown	dac_override dac_read_search fowner fsetid kill };
allow	springboot_t	self:process	{ signal_perms setsockcreate execmem execstack };

allow	springboot_t	self:dir	list_dir_perms;
allow	springboot_t	self:file	{ getattr read };
allow	springboot_t	self:lnk_file	read_lnk_file_perms;
allow	springboot_t	self:fifo_file	rw_fifo_file_perms;

allow	springboot_t	self:sem	create_sem_perms;
allow	springboot_t	self:shm	create_shm_perms;

allow	springboot_t	self:tcp_socket			create_stream_socket_perms;
allow	springboot_t	self:udp_socket			create_stream_socket_perms;
allow	springboot_t	self:unix_dgram_socket		create_socket_perms;
allow	springboot_t	self:unix_stream_socket		{ create_stream_socket_perms connectto };
allow	springboot_t	self:netlink_selinux_socket	create_socket_perms;
allow	springboot_t	self:netlink_route_socket	{ bind create getattr nlmsg_read };

#
##	Permission on other system resources
#

allow	springboot_t	sysctl_net_t:dir	search;
allow	springboot_t	sysctl_net_t:file	{ getattr open read };

allow	springboot_t	fs_t:filesystem		{ getattr };

allow	springboot_t	sysfs_t:dir		{ getattr search open read };

allow	springboot_t	proc_t:dir		list_dir_perms;
allow	springboot_t	proc_t:file		{ read open getattr };

allow	springboot_t	proc_net_t:file		{ read open getattr };

allow	springboot_t	bin_t:file		exec_file_perms;

allow	springboot_t	tmp_t:dir		{ rw_dir_perms create rmdir };
allow	springboot_t	tmp_t:file		{ manage_file_perms execute };

allow	springboot_t	user_tmp_t:dir		rw_dir_perms;
allow	springboot_t	user_tmp_t:file		{ manage_file_perms map };

allow	springboot_t	user_home_dir_t:dir	{ list_dir_perms };

ifdef(`distro_redhat',`
allow	springboot_t	passwd_file_t:file	{ read	open	getattr };
')
allow	springboot_t	shell_exec_t:file	{ getattr	open	read	execute};

allow	springboot_t	cert_t:dir		list_dir_perms;
allow	springboot_t	cert_t:file		read_file_perms;
allow	springboot_t	cert_t:lnk_file		read_lnk_file_perms;

#
##	Permissions	on	Springboot	specific	resources
#

#	Allow	to	perform	network	operations
allow	springboot_t	node_t:tcp_socket			{ node_bind };

allow	springboot_t	springboot_port_t:tcp_socket		name_bind;

corenet_tcp_connect_ocsp_port(springboot_t)

if (allow_springboot_connectto_http) {
	allow	springboot_t	http_port_t:tcp_socket		name_connect;
	allow	springboot_t	httpd_t:peer				recv;
}

if (allow_springboot_connectto_self) {
	allow	springboot_t	springboot_port_t:tcp_socket	name_connect;
	allow	springboot_t	springboot_t:peer				recv;
}

if (allow_springboot_syslog_netsend) {
	allow	springboot_t	syslogd_port_t:tcp_socket		name_connect;
	allow	springboot_t	syslogd_port_t:udp_socket		lhqg__sendrecv_udp_socket_perms;
	allow	springboot_t	syslog_tls_port_t:tcp_socket	name_connect;
	allow	springboot_t	syslogd_t:peer					recv;
}

if (allow_springboot_connectto_ldap) {
	allow	springboot_t	ldap_port_t:tcp_socket	name_connect;
	allow	springboot_t	slapd_t:peer			recv;
ifdef(`distro_redhat',`
	allow	springboot_t	dirsrv_t:peer			recv;
')
}

if (allow_springboot_connectto_smtp) {
	allow	springboot_t	smtp_port_t:tcp_socket	name_connect;
	allow	springboot_t	postfix_smtpd_t:peer			recv;
	allow	springboot_t	qmail_smtpd_t:peer				recv;
	allow	springboot_t	sendmail_t:peer					recv;
}

ifdef(`distro_redhat',`
	if (allow_springboot_connectto_oracle) {
		allow	springboot_t	oracle_port_t:tcp_socket	name_connect;
	}

	if (allow_springboot_connectto_mongodb) {
		allow	springboot_t	mongod_port_t:tcp_socket	name_connect;
	}

	optional_policy(`
		gen_require(`
			type	mongod_t;
		')
		if (allow_springboot_connectto_mongodb) {
			allow	springboot_t	mongod_t:peer				recv;
		}
	')
')

if (allow_springboot_connectto_mysql) {
	allow	springboot_t	mysqld_port_t:tcp_socket	name_connect;	
	allow	springboot_t	mysqld_t:peer				recv;
}

if (allow_springboot_connectto_pgsql) {
	allow	springboot_t	postgresql_port_t:tcp_socket	name_connect;
	allow	springboot_t	postgresql_t:peer				recv;
}

if (allow_springboot_connectto_redis) {
	allow	springboot_t	redis_port_t:tcp_socket	name_connect;
	allow	springboot_t	redis_t:peer			recv;
}

if (allow_springboot_connectto_couchdb) {
	allow	springboot_t	couchdb_port_t:tcp_socket	name_connect;
	allow	springboot_t	couchdb_t:peer				recv;
}

#	Allow to consume authorized network services
allow	springboot_t	springboot_consumed_svc_type:tcp_socket		name_connect;

#	Allow to listen on ports to be monitored by authorized domains
allow	springboot_t	springboot_monitoring_port_type:tcp_socket	name_bind;


#	Permissions	on	Springboot	specific	files/dirs

allow	springboot_t	springboot_file_type:dir					list_dir_perms;
allow	springboot_t	springboot_file_type:notdevfile_class_set	getattr;
allow	springboot_t	springboot_file_type:file					read_file_perms;
allow	springboot_t	springboot_file_type:lnk_file				read_lnk_file_perms;

allow	springboot_t	springboot_bin_t:file						exec_file_perms;
allow	springboot_t	springboot_lib_t:file						map;

if	(allow_springboot_dynamic_libs)	{
	allow	springboot_t	springboot_dynlib_t:dir			{ create_dir_perms rw_dir_perms };
	allow	springboot_t	springboot_dynlib_t:file		manage_file_perms;
	allow	springboot_t	springboot_dynlib_t:file		exec_file_perms;
	allow	springboot_t	springboot_dynlib_t:lnk_file	manage_lnk_file_perms;

	filetrans_add_pattern(springboot_t,	springboot_dynlib_t,	springboot_dynlib_t,	{ dir file lnk_file } )
}
type_transition	springboot_t	springboot_var_t:dir	springboot_dynlib_t	"lib" ;
type_transition	springboot_t	springboot_run_t:dir	springboot_dynlib_t	"lib" ;
type_transition	springboot_t	springboot_tmp_t:dir	springboot_dynlib_t	"lib" ;

allow	springboot_t	springboot_exec_t:file		exec_file_perms;

allow	springboot_t	springboot_var_t:dir		manage_dir_perms;
allow	springboot_t	springboot_var_t:file		manage_file_perms;
allow	springboot_t	springboot_var_t:lnk_file	manage_lnk_file_perms;

filetrans_add_pattern(springboot_t,	springboot_var_t,	springboot_tmp_t,	dir, "tmp" )
filetrans_add_pattern(springboot_t,	springboot_var_t,	springboot_tmp_t,	dir, "temp" )
filetrans_add_pattern(springboot_t,	springboot_var_t,	springboot_run_t,	dir, "run" )
filetrans_add_pattern(springboot_t,	springboot_var_t,	springboot_run_t,	dir, "cache" )
filetrans_add_pattern(springboot_t,	springboot_var_t,	springboot_run_t,	dir, "work" )
filetrans_add_pattern(springboot_t,	springboot_var_t,	springboot_var_t,	{ dir notdevfile_class_set } )


allow	springboot_t	springboot_run_t:dir		manage_dir_perms;
allow	springboot_t	springboot_run_t:file		manage_file_perms;
allow	springboot_t	springboot_run_t:lnk_file	manage_lnk_file_perms;
allow	springboot_t	springboot_run_t:sock_file	{ create_sock_file_perms rw_sock_file_perms };
allow	springboot_t	springboot_run_t:fifo_file	{ create_fifo_file_perms rw_fifo_file_perms };

filetrans_add_pattern(springboot_t,	springboot_run_t,	springboot_run_t,	{ dir notdevfile_class_set } )

allow	springboot_t	springboot_tmp_t:dir		manage_dir_perms;
allow	springboot_t	springboot_tmp_t:file		{ manage_file_perms map };
allow	springboot_t	springboot_tmp_t:lnk_file	manage_lnk_file_perms;
filetrans_add_pattern(springboot_t,	springboot_tmp_t,	springboot_tmp_t,	{ dir notdevfile_class_set } )
filetrans_add_pattern(springboot_t,	tmp_t,			springboot_tmp_t,	dir,				"hsperfdata_springboot" )

allow	springboot_t	springboot_log_t:dir		add_entry_dir_perms;
allow	springboot_t	springboot_log_t:file		{ create_file_perms append_file_perms read_file_perms rename_file_perms };
logging_log_filetrans(springboot_t,	springboot_log_t,	{ file	dir }	)

if	(allow_springboot_purge_logs)	{
	allow	springboot_t	springboot_log_t:dir	del_entry_dir_perms;
	allow	springboot_t	springboot_log_t:file	delete_file_perms;
}

if	(allow_springboot_rewrite_logs)	{
	allow	springboot_t	springboot_log_t:file	write_file_perms;
}


dontaudit	springboot_t	domain:dir	getattr;
dontaudit	springboot_t	domain:file	getattr;

#
##	Permissions for Sys admins (sysadm_t)
#

allow	sysadm_t	springboot_file_type:dir					list_dir_perms;
allow	sysadm_t	springboot_file_type:notdevfile_class_set	getattr;
allow	sysadm_t	springboot_file_type:lnk_file				read_lnk_file_perms;

allow	sysadm_t	springboot_bin_t:file		exec_file_perms;

allow	sysadm_t	springboot_conf_t:file		read_file_perms;
allow	sysadm_t	springboot_var_t:file		read_file_perms;
allow	sysadm_t	springboot_run_t:file		read_file_perms;
allow	sysadm_t	springboot_tmp_t:file		read_file_perms;
allow	sysadm_t	springboot_lib_t:file		read_file_perms;
allow	sysadm_t	springboot_dynlib_t:file	read_file_perms;
allow	sysadm_t	springboot_log_t:file		read_file_perms;
allow	sysadm_t	springboot_exec_t:file		read_file_perms;


allow	sysadm_t	springboot_unit_file_t:file		read_file_perms;
allow	sysadm_t	springboot_unit_file_t:service	manage_service_perms;

if	(allow_sysadm_write_springboot_files)	{
	allow	sysadm_t	springboot_tmp_t:dir	rw_dir_perms;
	allow	sysadm_t	springboot_log_t:dir	del_entry_dir_perms;
	allow	sysadm_t	springboot_conf_t:dir	del_entry_dir_perms;
	allow	sysadm_t	springboot_run_t:dir	del_entry_dir_perms;

	allow	sysadm_t	springboot_run_t:file	{ delete_file_perms	rename_file_perms };
	allow	sysadm_t	springboot_tmp_t:file	manage_file_perms;
	allow	sysadm_t	springboot_log_t:file	{ delete_file_perms	rename_file_perms };
	allow	sysadm_t	springboot_conf_t:file	write_file_perms;
}

if	(allow_sysadm_manage_springboot_auth_files)	{
	allow	sysadm_t	springboot_auth_t:dir	rw_dir_perms;
	allow	sysadm_t	springboot_auth_t:file	manage_file_perms;
}

#
##	Permissions for Web admins (webadm_t)
#

allow	webadm_t	springboot_file_type:dir					list_dir_perms;
allow	webadm_t	springboot_file_type:notdevfile_class_set	getattr;
allow	webadm_t	springboot_file_type:lnk_file				read_lnk_file_perms;

allow	webadm_t	springboot_unit_file_t:file		read_file_perms;
allow	webadm_t	springboot_unit_file_t:service	{ stop start status };

if	(allow_webadm_read_springboot_files)	{
	allow	webadm_t	springboot_conf_t:file	read_file_perms;
	allow	webadm_t	springboot_log_t:file	read_file_perms;
	allow	webadm_t	springboot_run_t:file	read_file_perms;
	allow	webadm_t	springboot_tmp_t:file	read_file_perms;
}

#
##	Permissions for log admins (logadm_t)
#

allow	logadm_t	springboot_file_type:dir					search_dir_perms;
allow	logadm_t	springboot_file_type:notdevfile_class_set	getattr;
allow	logadm_t	springboot_file_type:lnk_file				read_lnk_file_perms;

allow	logadm_t	springboot_log_t:dir		{ list_dir_perms del_entry_dir_perms delete_dir_perms create_dir_perms reparent };
allow	logadm_t	springboot_log_t:file		{ delete_file_perms rename_file_perms };

filetrans_add_pattern(logadm_t,	springboot_log_t, springboot_log_t, dir)
